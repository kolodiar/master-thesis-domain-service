{
	"info": {
		"_postman_id": "0c454676-c70d-44fd-a29b-03d12e73ea3d",
		"name": "IMS E2E tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20121980"
	},
	"item": [
		{
			"name": "add user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create user\", function () {",
							"    pm.response.to.have.status(201);",
							"    let user_id = pm.response.json()[\"id\"]",
							"    console.info(user_id)",
							"    pm.variables.set(\"id_to_test\", user_id)",
							"    postman.setNextRequest('get user by id');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{user_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ims-host}}/api/v1/users",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Schema is valid', function() {",
							"    pm.response.to.have.status(200);",
							"    let schema = JSON.parse(pm.variables.get(\"user_schema\"))",
							"    pm.response.to.have.jsonSchema(schema);",
							"    postman.setNextRequest('search');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ims-host}}/api/v1/users/{{id_to_test}}",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{id_to_test}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let user_scheme = JSON.parse(pm.variables.get(\"user_schema\"))",
							"let schema = {",
							"    \"type\": \"array\",",
							"    \"items\": [",
							"        user_scheme",
							"    ]",
							"}",
							"",
							"",
							"pm.test('User was found with search', function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonSchema(schema);",
							"    postman.setNextRequest('update user by id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"search\": \"{{user_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ims-host}}/api/v1/users/search",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Address was changes', function() {",
							"    pm.response.to.have.status(200);",
							"    let schema = JSON.parse(pm.variables.get(\"user_schema\"))",
							"    pm.response.to.have.jsonSchema(schema);",
							"    postman.setNextRequest('delete user by id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"newAddress\": \"{{user_address_new}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ims-host}}/api/v1/users/{{id_to_test}}",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{id_to_test}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User was deleted', function() {",
							"    pm.response.to.have.status(200);",
							"    postman.setNextRequest('search (not found)');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{ims-host}}/api/v1/users/{{id_to_test}}",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{id_to_test}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "search (not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User not found with search', function() {",
							"    pm.response.to.have.status(200);",
							"    let id_to_test = pm.variables.get(\"id_to_test\")",
							"    let id_not_found = pm.response.json().every((user) => user.id !== id_to_test)",
							"    pm.expect(id_not_found).to.be.true",
							"    postman.setNextRequest('get user by id (not found)');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"search\": \"{{user_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ims-host}}/api/v1/users/search",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user by id (not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User not found with get by id', function() {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ims-host}}/api/v1/users/{{id_to_test}}",
					"host": [
						"{{ims-host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{id_to_test}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_schema",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_list_schema",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_address_new",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_address",
			"value": "",
			"type": "string"
		}
	]
}